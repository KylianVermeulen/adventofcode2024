import Algorithms

struct Point: Hashable {
  let x: Int
  let y: Int
  
  func neighbors() -> [Point] {
    return [
      Point(x: x + 1, y: y),
      Point(x: x - 1, y: y),
      Point(x: x, y: y + 1),
      Point(x: x, y: y - 1)
    ]
  }
}

struct Grid {
  let width: Int
  let height: Int
  var corruptedCells: Set<Point>
  
  init(width: Int, height: Int) {
    self.width = width
    self.height = height
    self.corruptedCells = []
  }
  
  func isValid(_ point: Point) -> Bool {
    return point.x >= 0 && point.x < width &&
    point.y >= 0 && point.y < height &&
    !corruptedCells.contains(point)
  }
  
  mutating func corrupt(_ point: Point) {
    corruptedCells.insert(point)
  }
}

struct Day18: AdventDay {
  var data: String
  
  var coordinates: [Point] {
    return data.split(separator: "\n").map { line in
      let coords = line.split(separator: ",")
      return Point(
        x: Int(coords[0])!,
        y: Int(coords[1])!
      )
    }
  }
  
  func findShortestPath(grid: Grid, start: Point, end: Point) -> Int? {
    var queue: [(Point, Int)] = [(start, 0)]
    var visited: Set<Point> = [start]
    var index = 0
    
    while index < queue.count {
      let (current, steps) = queue[index]
      index += 1
      
      if current == end {
        return steps
      }
      
      for next in current.neighbors() {
        if grid.isValid(next) && !visited.contains(next) {
          queue.append((next, steps + 1))
          visited.insert(next)
        }
      }
    }
    
    return nil
  }

  /**
   OOOOOOOOOOOOO..#.......................................................
   .###########O##...#....................................................
   .#...#OOOOO#OOO#.......................................................
   .#.###O###O###O#.......#...............................................
   .#...#O#..OOOOO#.#.#...#...............................................
   .###.#O#######.#.#.....................................................
   .....#OOO#...#.#...#...................................................
   ########O#.#.#.#.....#.................................................
   OOOOOOOOO#.#.#.#...#...................................................
   O########..#.#.#.#.#OOOOOOO#OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
   OOOOO#...#.#...#.#..O#.#..OOO#...#...................#.#.....#...#....O
   .###O#.#.#.#####.#..O#........................................####.###O
   ...#O#...#.....#....O#...........................................#...#O
   ##.#O#.#####.#######O####...#.....................................##.#O
   .#.#O#.......#OOOOOOO#.#.............................................#O
   .#.#O#.#######O#######.#.#.#........................................##O
   ...#O#...#...#O#..OOO#.#.#...........................................#O
   .###O###.#.#.#O###O#O#.#.#....#.............................#......#.#O
   ...#OOO#.....#OOOOO#O#.#.......................................#.#...#O
   ##..##O##..#########O#.#.#.......................................#.#.#O
   ...#.#OOO#.#OOO#OOO#OOO#.#...........................................#O
   .###.###O###O#O#O#O###O#..#...................................#..#.###O
   .#.....#OOOOO#O#O#O#OOO#.....#.................................#.#.#OOO
   .#####.#######O#O#O#O#########...#...........................#.....#O##
   .....#.......#O#O#OOO#.....#...#...................................#OOO
   ####.###.###.#O#O#######.###..#....#.....................#.......#.###O
   .#...#...#...#OOO......#.#...#...............................#...#...#O
   .#.###.##.##.#########.#.#.###..#.................................##.#O
   .......#...#.#...#...#...#.......#...............................#...#O
   .#######.#..##...###.###.###.#.................................###.##.O
   ...#...........#...#...#...#...................................#.....#O
   ##.#..####.#.##.##.#.###.#####.................................#######O
   ...#...#...........#.....#.........................................#OOO
   .####....###.#.#.#.#.#####.#...............................#.#####.#O##
   .#...#...#...#.....#.#.......................................#.....#OOO
   .##...####.###.....###.####................................#.#.#######O
   ...#.....#.#.....#.....#.......................................#OOO#OOO
   ##.#.#.###.#......######.#................................##..##O#O#O#.
   ...#.#.#...#.#.............................................#.#OOO#OOO#.
   .###.##....#.#.....####.#...............................##..##O######.#
   .....#.....................................................#OOO#OOOOOOO
   .#####.#............##...............................#...#.#O###O##.##O
   .#.......................................................#.#OOOOO..#.#O
   .#.####..##..............................................#.#######.#.#O
   .#.#.................................................#...#...#OOO#...#O
   .#........#........................................#.#.......#O#O#####O
   .#.....................................................#.#...#O#OOOOOOO
   ##.#.....................................................#.##.O##.##...
   .......#.................................................#.#.#O#.......
   .........................................................#...#O#.......
   ...........................................................#.#O#.......
   .#...............................###.#.###..#.#..#...#.......#O#######.
   ...........................................................#.#OOOOOOO#.
   .............................#...#...#.#........##.....#..#..#######O##
   .........................#...#.....#.....#.....#...................#OOO
   .........................##.#####.#####........#.#.#.#.###...#.#....##O
   .............................#...#.....#.....#.............#.......#OOO
   ..........................##.#.#.###.#.#....#.###.###.##...#.....#.#O##
   .........................#...#.#.#...#.#...#...#.......#.#.........#OOO
   .....................#.#.#...#.#.#.###.#..##.#.#####.###.#########..##O
   .............................#.#...#...#...#.#.....#...#.#.....#...#OOO
   ........................#.##.#..####.#######.#####.###.#.#.###.###.#O#.
   ...............................#.#...#.......#...#...#...#.#.....#.#O#.
   .............................###.#.###.#######.#.###.###.#.##.##.#.#O##
   .................................#.....#.......#...#...#.#...#.#.#.#OOO
   .......................#.#..#..#.#######.######.##.###.#.###.#.#.#..##O
   .............................#.#.#.......#...........#.#...#.#...#.#.#O
   .......................#.#.#.##..#.####.##.######.####.#.###.#.##....#O
   ...........................#...#.#.#...#.#.#.....#...#.#.#...#...#...#O
   .......................##...##.#.#.#.#.#.#.#.###.#.#.#.###.#####.#####O
   .......................#.......#.....#...#.....#...#.......#..........O
   */
  func part1() -> Any {
    let maxX = coordinates.max(by: { $0.x < $1.x })?.x ?? 0
    let maxY = coordinates.max(by: { $0.y < $1.y })?.y ?? 0
    var grid = Grid(width: maxX + 1, height: maxY + 1)
    
    for coordinate in coordinates.prefix(1024) {
      grid.corrupt(coordinate)
    }
    
    let start = Point(x: 0, y: 0)
    let end = Point(x: maxX, y: maxY)
    
    if let shortestPath = findShortestPath(grid: grid, start: start, end: end) {
      return shortestPath
    }
    
    return "No path found"
  }
  
  func part2() -> Any {
    let maxX = coordinates.max(by: { $0.x < $1.x })?.x ?? 0
    let maxY = coordinates.max(by: { $0.y < $1.y })?.y ?? 0
    var grid = Grid(width: maxX + 1, height: maxY + 1)
    
    for coordinate in coordinates.prefix(1024) {
      grid.corrupt(coordinate)
    }
    
    for coordinate in coordinates.suffix(from: 1024) {
      grid.corrupt(coordinate)
      
      let start = Point(x: 0, y: 0)
      let end = Point(x: maxX, y: maxY)
      
      if findShortestPath(grid: grid, start: start, end: end) == nil {
        return "\(coordinate.x),\(coordinate.y)"
      }
    }
    
    return "Path never blocked"
  }
}
